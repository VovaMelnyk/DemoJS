// const result = 1 + 2 * 3 - 8

// # –ú–æ–¥—É–ª—å 2. –ó–∞–Ω—è—Ç—Ç—è 3. –ú–∞—Å–∏–≤–∏

// ## Example 1 - –ë–∞–∑–æ–≤—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑ –º–∞—Å–∏–≤–æ–º

// –°—Ç–≤–æ—Ä–∏—Ç–∏ –º–∞—Å–∏–≤ `genres` –∑ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ ¬´Jazz¬ª –∏ ¬´Blues¬ª
// –î–æ–¥–∞–π—Ç–µ ¬´–†–æ–∫ - –Ω - —Ä–æ–ª–ª¬ª –≤ –∫—ñ–Ω–µ—Ü—å –º–∞—Å–∏–≤—É
// –í–∏–≤–µ–¥—ñ—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç
// –í–∏–≤–µ–¥—ñ—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å –æ—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç
// –í–∏–¥–∞–ª—ñ—Ç—å –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç
// –í—Å—Ç–∞–≤—Ç–µ  ¬´Country¬ª —Ç–∞  ¬´Reggy¬ª –≤ –ø–æ—á–∞—Ç–æ–∫ –º–∞—Å–∏–≤—É

// ```js
// const genres = ["Jazz", "Blues"];
// genres.push("Rock-n-Roll");
// console.log(genres[genres.length - 1]);
// genres.shift();
// genres.unshift("Country", "Reggy");
// genres.splice(0, 0, "Country", "Reggy");
// console.log(genres.splice(0, 1));
// console.log(genres.slice(1));
// console.log(genres);

// ```

// ## Example 2 - –ú–∞—Å–∏–≤–∏ —ñ —Ä—è–¥–∫–∏

// –ù–∞–ø–∏—à–∏ –∫–æ–¥ –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –ø–ª–æ—â—ñ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞ –∑—ñ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏, –∑–Ω–∞—á–µ–Ω–Ω—è —è–∫–∏—Ö –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –≤ —Ä—è–¥–∫—É

// ```js
// const values = "8 11";
// const array = values.split(" ");
// const result = array[0] * array[1];
// console.log(result);
// // ```

// const numbers = [1, 2, 3, 4, 5];
// numbers[5] = 6;
// numbers[20] = 7;
// console.log(numbers[15]);
// // numbers[1] = 20;
// console.log(numbers);

// ## Example 3 - –ü–µ—Ä–µ–±–æ—Ä –º–∞—Å–∏–≤—É

// –ù–∞–ø–∏—à—ñ—Ç—å –∫–æ–¥ –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä—É –º–∞—Å–∏–≤—É —Ü–∏–∫–ª–æ–º for –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç—É –≤–∏–≤–µ–¥—ñ—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å —Ä—è–¥–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç—ñ
// '–Ω–æ–º–µ—Ä –µ–ª–µ–º–µ–Ω—Ç—É: –∑–Ω–∞—á–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—É'

// ```js
// const fruits = ["üçé", "üçá", "üçë", "üçå", "üçã"];

// for (let i = 0; i < fruits.length; i += 1) {
//   console.log(`${i + 1}: ${fruits[i]}`);
// }

// for (let fruit of fruits) {
//   const index = fruits.indexOf(fruit) + 1;
//   console.log(`${index}: ${fruit}`);
// }
// ```

// ## Example 4 - –ú–∞—Å–∏–≤–∏  —Ç–∞ —Ü–∏–∫–ª–∏

// –ù–∞–ø–∏—à—ñ—Ç—å —Å–∫—Ä–∏–ø—Ç —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å —ñ–º—è —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

// ```js
// const names = "Jacob,William,Solomon,Artemis";
// const phones = "089001234567,089001112233,0890055566377,0890055566300";

// const namesArr = names.split(",");
// const phonesArr = phones.split(",");

// console.log(namesArr);
// console.log(phonesArr);

// for (let i = 0; i < namesArr.length; i += 1) {
//   console.log(`${namesArr[i]}: ${phonesArr[i]}`);
// }
// ```

// ## Example 5 - –ú–∞—Å—Å–∏–≤—ã –∏ —Å—Ç—Ä–æ–∫–∏

// –ù–∞–ø–∏—à—ñ—Ç—å —Å–∫—Ä–∏–ø—Ç —â–æ —Ä–æ–∑–≤–µ—Ä—Ç–∞—î —Ä—è–¥–æ–∫ –≤ –∑–≤–æ—Ä–æ—Ç–Ω—å–æ–º—É –Ω–∞–ø—Ä—è–º–∫—É

// ```js
// const string = "Welcome to the future";
// const arr = string.split(" ");
// const reversed = arr.reverse();
// const reversedString = reversed.join(" ");
// console.log(reversedString);
// ```

// ## Example 6 - –ü–æ—à—É—Ç–∫ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É

// –ù–∞–ø–∏—à–∏ –∫–æ–¥ –¥–ª—è –ø–æ—à—É–∫—É –µ–ª–µ–º–µ–Ω—Ç–∞ –≤ –º–∞—Å–∏–≤—ñ —ñ –≤–∏–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å

// ```js

// const numbers = [17, 2, 94, 1, 23, 37];
// let min = numbers[0];
// for (let number of numbers) {
//   if (number < min) {
//     min = number;
//   }
// }
// 1
// min = 17
// number = 17
// 17 < 17 // false

// 2
// min = 17
// number = 2
// 2 < 17 // true
// min = 2

// 3
// min = 2
// number = 94
// 94 < 2

// 4
// min = 2
// number = 1
// 1 < 2 // true
// console.log(min); // 1
// min = 1
// ```

// # –ú–æ–¥—É–ª—å 2. –ó–∞–Ω—è—Ç—Ç—è 4. –§—É–Ω–∫—Ü—ñ—ó

// ## Example 1 - –ú–µ–Ω—å—à–µ –∑ —á–∏—Å–µ–ª

// –ù–∞–ø–∏—à–∏ —Ñ-—é —è–∫–∞ –±—É–¥–µ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ –º–µ–Ω—å—à–µ –∑ –¥–≤–æ—Ö —á–∏—Å–µ–ª "a" —Ç–∞ "b"

// function min(a, b) {
//   if (a < b) {
//     return a;
//   }
//   if (a > b) {
//     return b;
//   }
//   return b;
// }

// function min(a, b) {
//   if (a < b) {
//     return a;
//   } else if (a > b) {
//     return b;
//   } else {
//     return a;
//   }
// }

// function min(a, b) {
//   let result;
//   if (a < b) {
//     result = a;
//   } else if (a > b) {
//     result = b;
//   } else {
//     result = a;
//   }
//   return result;
// }

// function min(a, b) {
//   return a < b ? a : b;
// }

// ```js
// console.log(min(2, 5)); // 2
// console.log(min(3, -1)); // -1
// console.log(min(1, 1)); // 1
// console.log(min(0.1, 1 / 10)); // 1

// ```

// ## Example 2 - –ü–ª–æ—â–∞ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞

// –ù–∞–ø–∏—à–∏ —Ñ - —é`getRectArea(dimensions)`—è–∫–∞ –±—É–¥–µ —Ä–∞—Ö—É–≤–∞—Ç–∏ –ø–ª–æ—â—É –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞ –∑—ñ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏, –∑–Ω–∞—á–µ–Ω–Ω—è —è–∫–∏—Ö
// –±—É–¥–µ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ `dimensions` –≤ —Ñ–æ—Ä–º–∞—Ç—ñ —Ä—è–¥–∫–∞

// ```js
// function getRectArea(dimensions) {
//   const numbers = dimensions.split(" ");
//   const result = numbers[0] * numbers[1];
//   return result;
// }

// function getRectArea(dimensions) {
//   const numbers = dimensions.split(" ");
//   return numbers[0] * numbers[1];
// }

// function getRectArea(dimensions) {
//   const numbers = dimensions.split(" ");
//   console.log(numbers);
//   return (Number(numbers[0]) + Number(numbers[1])) * 2;
// }

// console.log(getRectArea("8 11"));
// ```

// ## Example 3 - –ü–æ–∫–∞–∑ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å

// –ù–∞–ø–∏—à–∏ —Ñ - —é`logItems(items)` —â–æ –æ—Ç—Ä–∏–º—É—î –º–∞—Å–∏–≤ —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ü–∏–∫–ª —ñ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç—É –≤–∏–≤–æ–¥–∏—Ç—å
// `<–Ω–æ–º–µ—Ä –µ–ª–µ–º–µ–Ω—Ç–∞> - <–∑–Ω–∞—á–µ–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞>` –ù—É–º–µ—Ä–∞—Ü—ñ—è –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ 1

// ```js
// function logItems(items) {
//   for (let i = 0; i < items.length; i += 1) {
//     console.log(`${i + 1} - ${items[i]}`);
//   }
// }

// logItems(["Mango", "Poly", "Ajax"]);
// logItems(["üçé", "üçá", "üçë", "üçå", "üçã"]);
// ```

// ## Example 4 - –ü–æ—à—É–∫ –Ω–∞–π–±—ñ–ª—å—à–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç—É

// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ-—é `findLargestNumber(numbers)` —è–∫–∞ —à—É–∫–∞—î —Å–∞–º–µ –±—ñ–ª—å—à–µ —á–∏—Å–ª–æ –≤ –º–∞—Å–∏–≤—ñ

// ```js
// function findLargestNumber(numbers) {
//   let acc = numbers[0];
//   for (let number of numbers) {
//     const index = numbers.indexOf(number);
//     if (acc < number) {
//       acc = number;
//     }
//   }
//   return acc;
// }

// console.log(findLargestNumber([2, 17, 94, 1, 23, 37])); // 94
// console.log(findLargestNumber([49, 4, 7, 83, 12])); // 83
// console.log(findLargestNumber([-2, 0, 3, 5, 7])); // 7

// ```

// ## Example 5 - –°–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è

// –ù–∞–ø–∏—à–∏ —Ñ-—é `calAverage()` —è–∫–∞ –ø—Ä–∏–π–º–∞—î –±—É–¥—å-—è–∫—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ —ñ –ø–æ–≤–µ—Ä—Ç–∞—î —ó—Ö —Å–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è

// ```js
// function calAverage() {
//   const array = Array.from(arguments);
//   let total = 0;
//   for (let element of array) {
//     total += element;
//   }
//   return total / array.length;
// }

// console.log(calAverage(1, 2, 3, 4)); // 2.5
// console.log(calAverage(14, 8, 2)); // 8
// console.log(calAverage(27, 43, 2, 8, 36)); // 23.2
// ```

// ## Example 6 - –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É

// –ù–∞–ø–∏—à–∏ —Ñ-—é `formatTime(minutes)` —è–∫–∞ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î –∑–Ω–∞—á–µ–Ω–Ω—è `minutes` –≤ —Ä—è–¥–æ–∫ —Ñ–æ—Ä–º–∞—Ç—É "HH:MM"

// ```js

// function formatTime(minutes) {
//   const hours = Math.floor(minutes / 60);
//   const minutesValue = minutes % 60;

//   const formatedHours = hours < 10 ? `0${hours}` : hours;
//   const formatedMinutes = minutesValue < 10 ? `0${minutesValue}` : minutesValue;

//   return `${formatedHours}:${formatedMinutes}`;
// }

// function formatValue(number) {
//   return number < 10 ? `0${number}` : number;
// }

// function formatTime(minutes) {
//   const hours = Math.floor(minutes / 60);
//   const minutesValue = minutes % 60;

//   const formatedHours = formatValue(hours);
//   const formatedMinutes = formatValue(minutesValue);

//   return `${formatedHours}:${formatedMinutes}`;
// }

// function formatTime(minutes, callback) {
//   const hours = Math.floor(minutes / 60);
//   const minutesValue = minutes % 60;

//   const formatedHours = callback(hours);
//   const formatedMinutes = callback(minutesValue);

//   return `${formatedHours}:${formatedMinutes}`;
// }

// console.log(formatTime(70, formatValue)); // "01:10"
// console.log(formatTime(450), formatValue); // "07:30"
// console.log(formatTime(1441), formatValue); // "24:01"
// ```

// ## Example 7 - –ö–æ–ª–µ–∫—Ü—ñ—ó –∫—É—Ä—Å—ñ–≤ (includes, indexOf, push ...)

// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ - —ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–æ–ª–µ–∫—Ü—ñ—è–º–∏ –∫—É—Ä—Å—ñ–≤`courses`

// - `addCourse(name)` - –¥–æ–¥–∞—î –∫—É—Ä—Å –≤ –∫—ñ–Ω–µ—Ü—å –∫–æ–ª–µ–∫—Ü—ñ—ó
// - `removeCourse(name)` - –≤–∏–¥–∞–ª—è—î –∫—É—Ä—Å –∑ –∫–æ–ª–µ–∫—Ü—ñ—ó
// - `updateCourse(oldName, newName)` - –º—ñ–Ω—è—î –Ω–∞–∑–≤—É –∫—É—Ä—Å—É –Ω–∞ –Ω–æ–≤—É

// ```js
// const courses = ["HTML", "CSS", "JavaScript", "React", "PostgreSQL"];

// function addCourse(name) {
//   if (courses.includes(name)) {
//     return `–£ –í–∞—Å —É–∂–µ —î —Ç–∞–∫–∏–π –∫—É—Ä—Å`;
//   }
//   courses.push(name);
// }

// const removeCourse = function (name) {
//   if (!courses.includes(name)) {
//     return "–ö—É—Ä—Å –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤—ñ–¥—Å—É—Ç–Ω—ñ–π";
//   }
//   const courseIndex = courses.indexOf(name);
//   courses.splice(courseIndex, 1);
// };

// const updateCourse = function (oldName, newName) {
//   if (!courses.includes(oldName)) {
//     return "–ö—É—Ä—Å –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤—ñ–¥—Å—É—Ç–Ω—ñ–π";
//   }
//   const courseIndex = courses.indexOf(oldName);
//   courses.splice(courseIndex, 1, newName);
// };

// console.log(addCourse("Express"));
// console.log(courses); // ['HTML', 'CSS', 'JavaScript', 'React', 'PostgreSQL', 'Express']
// console.log(addCourse("CSS")); // '–£ –í–∞—Å —É–∂–µ —î —Ç–∞–∫–∏–π –∫—É—Ä—Å'

// removeCourse("React");
// console.log(courses); // ['HTML', 'CSS', 'JavaScript', 'PostgreSQL', 'Express']
// console.log(removeCourse("Vue")); // '–ö—É—Ä—Å –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤—ñ–¥—Å—É—Ç–Ω—ñ–π'

// console.log(updateCourse("Express", "NestJS"));
// updateCourse("Express", "NestJS");
// console.log(courses); // ['HTML', 'CSS', 'JavaScript', 'PostgreSQL', 'NestJS']
// ```

// function calcSum(array) {
//   let total = 0;
//   for (let element of array) {
//     total += element;
//   }
//   return total;
// }

// function reduceArray(array) {
//   const result = array.reduce(function (total, element) {
//     return (total += element);
//   }, 0);
//   return result;
// }

// console.log(reduceArray([1, 2, 3, 4])); // 10
